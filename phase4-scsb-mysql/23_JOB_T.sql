/*
-- Query: SELECT * FROM recap.job_t
-- Date: 2017-04-20 15:52
*/
INSERT INTO `recap`.`job_t` (`JOB_ID`,`JOB_NAME`,`JOB_DESC`,`LAST_EXECUTED_TIME`,`NEXT_RUN_TIME`,`CRON_EXP`,`STATUS`,`JOB_INSTANCE_ID`) VALUES (1,'PurgeExceptionRequests','The job purges the requests that end up with \'Exception\' status and are 365 days old. The number of days is configurable.',NULL,NULL,NULL,NULL,NULL);
INSERT INTO `recap`.`job_t` (`JOB_ID`,`JOB_NAME`,`JOB_DESC`,`LAST_EXECUTED_TIME`,`NEXT_RUN_TIME`,`CRON_EXP`,`STATUS`,`JOB_INSTANCE_ID`) VALUES (2,'PurgeEmailAddress','The job purges the patron email addresses entered in SCSB as part of requests. In case of physical requests, it will be purged 90 days after refile and in case of EDD, 60 days from the date of fulfillment. The number of days are configurable.',NULL,NULL,NULL,NULL,NULL);
INSERT INTO `recap`.`job_t` (`JOB_ID`,`JOB_NAME`,`JOB_DESC`,`LAST_EXECUTED_TIME`,`NEXT_RUN_TIME`,`CRON_EXP`,`STATUS`,`JOB_INSTANCE_ID`) VALUES (3,'OngoingMatchingAlgorithm','The job initiates the ongoing matching algorithm process in SCSB. The processes are typically executed daily after the accession and submit collection processes are completed.',NULL,NULL,NULL,NULL,NULL);
INSERT INTO `recap`.`job_t` (`JOB_ID`,`JOB_NAME`,`JOB_DESC`,`LAST_EXECUTED_TIME`,`NEXT_RUN_TIME`,`CRON_EXP`,`STATUS`,`JOB_INSTANCE_ID`) VALUES (4,'DailyLASTransactionReconciliation','The job reconciles the daily LAS transactions with SCSB.',NULL,NULL,NULL,NULL,NULL);
INSERT INTO `recap`.`job_t` (`JOB_ID`,`JOB_NAME`,`JOB_DESC`,`LAST_EXECUTED_TIME`,`NEXT_RUN_TIME`,`CRON_EXP`,`STATUS`,`JOB_INSTANCE_ID`) VALUES (5,'GenerateAccessionReport','The job generates an ongoing accession report.',NULL,NULL,NULL,NULL,NULL);
INSERT INTO `recap`.`job_t` (`JOB_ID`,`JOB_NAME`,`JOB_DESC`,`LAST_EXECUTED_TIME`,`NEXT_RUN_TIME`,`CRON_EXP`,`STATUS`,`JOB_INSTANCE_ID`) VALUES (6,'Accession','The job initiates the batch ongoing accession process where barcodes that were accumulated throughout the day are processed.',NULL,NULL,NULL,NULL,NULL);
INSERT INTO `recap`.`job_t` (`JOB_ID`,`JOB_NAME`,`JOB_DESC`,`LAST_EXECUTED_TIME`,`NEXT_RUN_TIME`,`CRON_EXP`,`STATUS`,`JOB_INSTANCE_ID`) VALUES (7,'AccessionToDataExportJobsInSequence','The job runs all the accession process related jobs sequentially. Jobs that are included to run in the sequence are 1) Accession 2) Accession report 3) Submit Collection 4) Matching Algorithm 5) Incremental and Deleted Export.',NULL,NULL,NULL,NULL,NULL);
INSERT INTO `recap`.`job_t` (`JOB_ID`,`JOB_NAME`,`JOB_DESC`,`LAST_EXECUTED_TIME`,`NEXT_RUN_TIME`,`CRON_EXP`,`STATUS`,`JOB_INSTANCE_ID`) VALUES (8,'PurgeCompletedAccessions','The job purges all the accessions which are in \'Complete\' status and are 30 days old. The number of days is configurable.',NULL,NULL,NULL,NULL,NULL);
INSERT INTO `recap`.`job_t` (`JOB_ID`,`JOB_NAME`,`JOB_DESC`,`LAST_EXECUTED_TIME`,`NEXT_RUN_TIME`,`CRON_EXP`,`STATUS`,`JOB_INSTANCE_ID`) VALUES (9,'PeriodicLASBarcodeReconciliation','The job does periodic barcode reconciliation between SCSB and LAS.',NULL,NULL,NULL,NULL,NULL);
INSERT INTO `recap`.`job_t` (`JOB_ID`,`JOB_NAME`,`JOB_DESC`,`LAST_EXECUTED_TIME`,`NEXT_RUN_TIME`,`CRON_EXP`,`STATUS`,`JOB_INSTANCE_ID`) VALUES (10,'DeletedRecords','The job captures any deletion of records in SCSB tables related to bibliographic, holdings, items and requests and an email notification is sent.',NULL,NULL,NULL,NULL,NULL);
INSERT INTO `recap`.`job_t` (`JOB_ID`,`JOB_NAME`,`JOB_DESC`,`LAST_EXECUTED_TIME`,`NEXT_RUN_TIME`,`CRON_EXP`,`STATUS`,`JOB_INSTANCE_ID`) VALUES (11,'PeriodicLASItemStatusReconciliation','The job does a periodic status reconciliation between SCSB and LAS.',NULL,NULL,NULL,NULL,NULL);
INSERT INTO `recap`.`job_t` (`JOB_ID`,`JOB_NAME`,`JOB_DESC`,`LAST_EXECUTED_TIME`,`NEXT_RUN_TIME`,`CRON_EXP`,`STATUS`,`JOB_INSTANCE_ID`) VALUES (12,'RequestInitialLoad','The job loads the initial request data in SCSB.',NULL,NULL,NULL,NULL,NULL);
INSERT INTO `recap`.`job_t` (`JOB_ID`,`JOB_NAME`,`JOB_DESC`,`LAST_EXECUTED_TIME`,`NEXT_RUN_TIME`,`CRON_EXP`,`STATUS`,`JOB_INSTANCE_ID`) VALUES (13,'SubmitCollection','The job updates the bib, holdings and item information for the given barcode in MARC or SCSB XML format.',NULL,NULL,NULL,NULL,NULL);
INSERT INTO `recap`.`job_t` (`JOB_ID`,`JOB_NAME`,`JOB_DESC`,`LAST_EXECUTED_TIME`,`NEXT_RUN_TIME`,`CRON_EXP`,`STATUS`,`JOB_INSTANCE_ID`) VALUES (14,'IncrementalAndDeletedExportJobInSequence','The job runs the incremental and deleted records export job for each institution in sequence.',NULL,NULL,NULL,NULL,NULL);
INSERT INTO `recap`.`job_t` (`JOB_ID`,`JOB_NAME`,`JOB_DESC`,`LAST_EXECUTED_TIME`,`NEXT_RUN_TIME`,`CRON_EXP`,`STATUS`,`JOB_INSTANCE_ID`) VALUES (15,'IncrementalRecordsExportPul','Incremental Records Export for PUL',NULL,NULL,NULL,NULL,NULL);
INSERT INTO `recap`.`job_t` (`JOB_ID`,`JOB_NAME`,`JOB_DESC`,`LAST_EXECUTED_TIME`,`NEXT_RUN_TIME`,`CRON_EXP`,`STATUS`,`JOB_INSTANCE_ID`) VALUES (16,'IncrementalRecordsExportCul','Incremental Records Export for CUL',NULL,NULL,NULL,NULL,NULL);
INSERT INTO `recap`.`job_t` (`JOB_ID`,`JOB_NAME`,`JOB_DESC`,`LAST_EXECUTED_TIME`,`NEXT_RUN_TIME`,`CRON_EXP`,`STATUS`,`JOB_INSTANCE_ID`) VALUES (17,'IncrementalRecordsExportNypl','Incremental Records Export for NYPL',NULL,NULL,NULL,NULL,NULL);
INSERT INTO `recap`.`job_t` (`JOB_ID`,`JOB_NAME`,`JOB_DESC`,`LAST_EXECUTED_TIME`,`NEXT_RUN_TIME`,`CRON_EXP`,`STATUS`,`JOB_INSTANCE_ID`) VALUES (18,'DeletedRecordsExportPul','Deleted Records Export for PUL',NULL,NULL,NULL,NULL,NULL);
INSERT INTO `recap`.`job_t` (`JOB_ID`,`JOB_NAME`,`JOB_DESC`,`LAST_EXECUTED_TIME`,`NEXT_RUN_TIME`,`CRON_EXP`,`STATUS`,`JOB_INSTANCE_ID`) VALUES (19,'DeletedRecordsExportCul','Deleted Records Export for CUL',NULL,NULL,NULL,NULL,NULL);
INSERT INTO `recap`.`job_t` (`JOB_ID`,`JOB_NAME`,`JOB_DESC`,`LAST_EXECUTED_TIME`,`NEXT_RUN_TIME`,`CRON_EXP`,`STATUS`,`JOB_INSTANCE_ID`) VALUES (20,'DeletedRecordsExportNypl','Deleted Records Export for NYPL',NULL,NULL,NULL,NULL,NULL);
INSERT INTO `recap`.`job_t` (`JOB_ID`,`JOB_NAME`,`JOB_DESC`,`LAST_EXECUTED_TIME`,`NEXT_RUN_TIME`,`CRON_EXP`,`STATUS`,`JOB_INSTANCE_ID`) VALUES (21,'CheckAndNotifyPendingRequest','Check And Notify Pending Request',NULL,NULL,NULL,NULL,NULL);
INSERT INTO `recap`.`job_t` (`JOB_ID`,`JOB_NAME`,`JOB_DESC`,`LAST_EXECUTED_TIME`,`NEXT_RUN_TIME`,`CRON_EXP`,`STATUS`,`JOB_INSTANCE_ID`) VALUES (22,'IdentifyAndNotifyPendingRequest','Identify and Notify Pending Requests from Database',NULL,NULL,NULL,NULL,NULL);
